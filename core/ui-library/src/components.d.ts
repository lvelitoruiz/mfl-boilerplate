/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { OrderIdCellProps } from "./components/molecules/order-id-cell/order-id-cell";
import { StatusBadgeProps } from "./components/atoms/status-badge/status-badge";
import { StatusIconProps } from "./components/atoms/status-icon/status-icon";
import { AvatarProps } from "./components/atoms/avatar/avatar";
import { IconProps } from "./components/atoms/icon/icon";
import { TextProps } from "./components/atoms/text/text";
export { OrderIdCellProps } from "./components/molecules/order-id-cell/order-id-cell";
export { StatusBadgeProps } from "./components/atoms/status-badge/status-badge";
export { StatusIconProps } from "./components/atoms/status-icon/status-icon";
export { AvatarProps } from "./components/atoms/avatar/avatar";
export { IconProps } from "./components/atoms/icon/icon";
export { TextProps } from "./components/atoms/text/text";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface OrderIdCell {
        /**
          * @default ''
         */
        "date": string;
        "onClick"?: (orderId: string) => void;
        /**
          * @default ''
         */
        "orderId": string;
        /**
          * @default 'open'
         */
        "status": OrderIdCellProps['status'];
        /**
          * @default ''
         */
        "time": string;
    }
    interface StatusBadge {
        /**
          * @default 'md'
         */
        "size": StatusBadgeProps['size'];
        /**
          * @default 'none'
         */
        "variant": StatusBadgeProps['variant'];
    }
    interface StatusIcon {
        /**
          * @default 'md'
         */
        "size": StatusIconProps['size'];
        /**
          * @default 'pending'
         */
        "status": StatusIconProps['status'];
    }
    interface UiAvatar {
        /**
          * @default ''
         */
        "alt"?: string;
        /**
          * @default 'initials'
         */
        "fallback": AvatarProps['fallback'];
        "initials"?: string;
        /**
          * @default 'md'
         */
        "size": AvatarProps['size'];
        "src"?: string;
    }
    interface UiIcon {
        "color"?: string;
        /**
          * @default 'user'
         */
        "name": IconProps['name'];
        /**
          * @default 'md'
         */
        "size": IconProps['size'];
    }
    interface UiText {
        "color"?: TextProps['color'];
        /**
          * @default false
         */
        "truncate"?: boolean;
        /**
          * @default 'body'
         */
        "variant": TextProps['variant'];
        "weight"?: TextProps['weight'];
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOrderIdCellElement extends Components.OrderIdCell, HTMLStencilElement {
    }
    var HTMLOrderIdCellElement: {
        prototype: HTMLOrderIdCellElement;
        new (): HTMLOrderIdCellElement;
    };
    interface HTMLStatusBadgeElement extends Components.StatusBadge, HTMLStencilElement {
    }
    var HTMLStatusBadgeElement: {
        prototype: HTMLStatusBadgeElement;
        new (): HTMLStatusBadgeElement;
    };
    interface HTMLStatusIconElement extends Components.StatusIcon, HTMLStencilElement {
    }
    var HTMLStatusIconElement: {
        prototype: HTMLStatusIconElement;
        new (): HTMLStatusIconElement;
    };
    interface HTMLUiAvatarElement extends Components.UiAvatar, HTMLStencilElement {
    }
    var HTMLUiAvatarElement: {
        prototype: HTMLUiAvatarElement;
        new (): HTMLUiAvatarElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "order-id-cell": HTMLOrderIdCellElement;
        "status-badge": HTMLStatusBadgeElement;
        "status-icon": HTMLStatusIconElement;
        "ui-avatar": HTMLUiAvatarElement;
        "ui-icon": HTMLUiIconElement;
        "ui-text": HTMLUiTextElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface OrderIdCell {
        /**
          * @default ''
         */
        "date"?: string;
        "onClick"?: (orderId: string) => void;
        /**
          * @default ''
         */
        "orderId"?: string;
        /**
          * @default 'open'
         */
        "status"?: OrderIdCellProps['status'];
        /**
          * @default ''
         */
        "time"?: string;
    }
    interface StatusBadge {
        /**
          * @default 'md'
         */
        "size"?: StatusBadgeProps['size'];
        /**
          * @default 'none'
         */
        "variant"?: StatusBadgeProps['variant'];
    }
    interface StatusIcon {
        /**
          * @default 'md'
         */
        "size"?: StatusIconProps['size'];
        /**
          * @default 'pending'
         */
        "status"?: StatusIconProps['status'];
    }
    interface UiAvatar {
        /**
          * @default ''
         */
        "alt"?: string;
        /**
          * @default 'initials'
         */
        "fallback"?: AvatarProps['fallback'];
        "initials"?: string;
        /**
          * @default 'md'
         */
        "size"?: AvatarProps['size'];
        "src"?: string;
    }
    interface UiIcon {
        "color"?: string;
        /**
          * @default 'user'
         */
        "name"?: IconProps['name'];
        /**
          * @default 'md'
         */
        "size"?: IconProps['size'];
    }
    interface UiText {
        "color"?: TextProps['color'];
        /**
          * @default false
         */
        "truncate"?: boolean;
        /**
          * @default 'body'
         */
        "variant"?: TextProps['variant'];
        "weight"?: TextProps['weight'];
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "order-id-cell": OrderIdCell;
        "status-badge": StatusBadge;
        "status-icon": StatusIcon;
        "ui-avatar": UiAvatar;
        "ui-icon": UiIcon;
        "ui-text": UiText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "order-id-cell": LocalJSX.OrderIdCell & JSXBase.HTMLAttributes<HTMLOrderIdCellElement>;
            "status-badge": LocalJSX.StatusBadge & JSXBase.HTMLAttributes<HTMLStatusBadgeElement>;
            "status-icon": LocalJSX.StatusIcon & JSXBase.HTMLAttributes<HTMLStatusIconElement>;
            "ui-avatar": LocalJSX.UiAvatar & JSXBase.HTMLAttributes<HTMLUiAvatarElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
        }
    }
}
