/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ContactInfoCellProps } from "./components/molecules/contact-info-cell/contact-info-cell";
import { DropdownOption } from "./components/molecules/dropdown-cell/dropdown-cell";
import { OrderIdCellProps } from "./components/molecules/order-id-cell/order-id-cell";
import { RepairOrderData } from "./components/organisms/repair-orders-table/repair-orders-table";
import { StatusBadgeProps } from "./components/atoms/status-badge/status-badge";
import { StatusCellProps } from "./components/molecules/status-cell/status-cell";
import { StatusIconProps } from "./components/atoms/status-icon/status-icon";
import { TableColumn } from "./components/organisms/table-header/table-header";
import { RepairOrderData as RepairOrderData1 } from "./components/organisms/table-row/table-row";
import { AvatarProps } from "./components/atoms/avatar/avatar";
import { IconProps } from "./components/atoms/icon/icon";
import { TextProps } from "./components/atoms/text/text";
export { ContactInfoCellProps } from "./components/molecules/contact-info-cell/contact-info-cell";
export { DropdownOption } from "./components/molecules/dropdown-cell/dropdown-cell";
export { OrderIdCellProps } from "./components/molecules/order-id-cell/order-id-cell";
export { RepairOrderData } from "./components/organisms/repair-orders-table/repair-orders-table";
export { StatusBadgeProps } from "./components/atoms/status-badge/status-badge";
export { StatusCellProps } from "./components/molecules/status-cell/status-cell";
export { StatusIconProps } from "./components/atoms/status-icon/status-icon";
export { TableColumn } from "./components/organisms/table-header/table-header";
export { RepairOrderData as RepairOrderData1 } from "./components/organisms/table-row/table-row";
export { AvatarProps } from "./components/atoms/avatar/avatar";
export { IconProps } from "./components/atoms/icon/icon";
export { TextProps } from "./components/atoms/text/text";
export namespace Components {
    interface ContactCell {
        "avatar"?: string;
        /**
          * @default ''
         */
        "name": string;
        /**
          * @default true
         */
        "showAvatar": boolean;
    }
    interface ContactInfoCell {
        /**
          * @default false
         */
        "clickable": boolean;
        /**
          * @default 'text'
         */
        "type": ContactInfoCellProps['type'];
        /**
          * @default ''
         */
        "value": string;
    }
    interface DropdownCell {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default []
         */
        "options": DropdownOption[];
        /**
          * @default 'Select...'
         */
        "placeholder": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface OrderIdCell {
        /**
          * @default ''
         */
        "date": string;
        "notificationCount"?: number;
        /**
          * @default ''
         */
        "orderId": string;
        /**
          * @default 'open'
         */
        "status": OrderIdCellProps['status'];
        /**
          * @default ''
         */
        "time": string;
    }
    interface RepairOrdersTable {
        /**
          * @default []
         */
        "data": RepairOrderData[];
        /**
          * @default false
         */
        "loading": boolean;
        /**
          * @default ''
         */
        "sortColumn": string;
        /**
          * @default null
         */
        "sortDirection": 'asc' | 'desc' | null;
    }
    interface StatusBadge {
        /**
          * @default 'md'
         */
        "size": StatusBadgeProps['size'];
        /**
          * @default 'none'
         */
        "variant": StatusBadgeProps['variant'];
    }
    interface StatusCell {
        /**
          * @default ''
         */
        "status": string;
        /**
          * @default 'none'
         */
        "variant": StatusCellProps['variant'];
    }
    interface StatusIcon {
        /**
          * @default 'md'
         */
        "size": StatusIconProps['size'];
        /**
          * @default 'pending'
         */
        "status": StatusIconProps['status'];
    }
    interface TableHeader {
        /**
          * @default []
         */
        "columns": TableColumn[];
        /**
          * @default ''
         */
        "sortColumn": string;
        /**
          * @default null
         */
        "sortDirection": 'asc' | 'desc' | null;
    }
    interface TableHeaderCell {
        /**
          * @default 'left'
         */
        "align": 'left' | 'center' | 'right';
        /**
          * @default null
         */
        "sortDirection"?: 'asc' | 'desc' | null;
        /**
          * @default false
         */
        "sortable": boolean;
        "width"?: string | number;
    }
    interface TableRow {
        "data": RepairOrderData1;
        /**
          * @default false
         */
        "selectable": boolean;
        /**
          * @default false
         */
        "selected": boolean;
    }
    interface UiAvatar {
        /**
          * @default ''
         */
        "alt"?: string;
        /**
          * @default 'initials'
         */
        "fallback": AvatarProps['fallback'];
        "initials"?: string;
        /**
          * @default 'md'
         */
        "size": AvatarProps['size'];
        "src"?: string;
    }
    interface UiIcon {
        "color"?: string;
        /**
          * @default 'user'
         */
        "name": IconProps['name'];
        /**
          * @default 'md'
         */
        "size": IconProps['size'];
    }
    interface UiText {
        "color"?: TextProps['color'];
        /**
          * @default false
         */
        "truncate"?: boolean;
        /**
          * @default 'body'
         */
        "variant": TextProps['variant'];
        "weight"?: TextProps['weight'];
    }
}
export interface ContactCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLContactCellElement;
}
export interface ContactInfoCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLContactInfoCellElement;
}
export interface DropdownCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownCellElement;
}
export interface OrderIdCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrderIdCellElement;
}
export interface RepairOrdersTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRepairOrdersTableElement;
}
export interface TableHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTableHeaderElement;
}
export interface TableHeaderCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTableHeaderCellElement;
}
export interface TableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTableRowElement;
}
declare global {
    interface HTMLContactCellElementEventMap {
        "contactClick": string;
    }
    interface HTMLContactCellElement extends Components.ContactCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLContactCellElementEventMap>(type: K, listener: (this: HTMLContactCellElement, ev: ContactCellCustomEvent<HTMLContactCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLContactCellElementEventMap>(type: K, listener: (this: HTMLContactCellElement, ev: ContactCellCustomEvent<HTMLContactCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLContactCellElement: {
        prototype: HTMLContactCellElement;
        new (): HTMLContactCellElement;
    };
    interface HTMLContactInfoCellElementEventMap {
        "infoClick": { type: string; value: string };
    }
    interface HTMLContactInfoCellElement extends Components.ContactInfoCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLContactInfoCellElementEventMap>(type: K, listener: (this: HTMLContactInfoCellElement, ev: ContactInfoCellCustomEvent<HTMLContactInfoCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLContactInfoCellElementEventMap>(type: K, listener: (this: HTMLContactInfoCellElement, ev: ContactInfoCellCustomEvent<HTMLContactInfoCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLContactInfoCellElement: {
        prototype: HTMLContactInfoCellElement;
        new (): HTMLContactInfoCellElement;
    };
    interface HTMLDropdownCellElementEventMap {
        "dropdownChange": string;
    }
    interface HTMLDropdownCellElement extends Components.DropdownCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDropdownCellElementEventMap>(type: K, listener: (this: HTMLDropdownCellElement, ev: DropdownCellCustomEvent<HTMLDropdownCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDropdownCellElementEventMap>(type: K, listener: (this: HTMLDropdownCellElement, ev: DropdownCellCustomEvent<HTMLDropdownCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDropdownCellElement: {
        prototype: HTMLDropdownCellElement;
        new (): HTMLDropdownCellElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOrderIdCellElementEventMap {
        "orderClick": string;
    }
    interface HTMLOrderIdCellElement extends Components.OrderIdCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOrderIdCellElementEventMap>(type: K, listener: (this: HTMLOrderIdCellElement, ev: OrderIdCellCustomEvent<HTMLOrderIdCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOrderIdCellElementEventMap>(type: K, listener: (this: HTMLOrderIdCellElement, ev: OrderIdCellCustomEvent<HTMLOrderIdCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOrderIdCellElement: {
        prototype: HTMLOrderIdCellElement;
        new (): HTMLOrderIdCellElement;
    };
    interface HTMLRepairOrdersTableElementEventMap {
        "sortChange": { column: string; direction: 'asc' | 'desc' };
        "rowClick": RepairOrderData;
        "cellClick": { cellType: string; value: any; data: RepairOrderData };
    }
    interface HTMLRepairOrdersTableElement extends Components.RepairOrdersTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRepairOrdersTableElementEventMap>(type: K, listener: (this: HTMLRepairOrdersTableElement, ev: RepairOrdersTableCustomEvent<HTMLRepairOrdersTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRepairOrdersTableElementEventMap>(type: K, listener: (this: HTMLRepairOrdersTableElement, ev: RepairOrdersTableCustomEvent<HTMLRepairOrdersTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRepairOrdersTableElement: {
        prototype: HTMLRepairOrdersTableElement;
        new (): HTMLRepairOrdersTableElement;
    };
    interface HTMLStatusBadgeElement extends Components.StatusBadge, HTMLStencilElement {
    }
    var HTMLStatusBadgeElement: {
        prototype: HTMLStatusBadgeElement;
        new (): HTMLStatusBadgeElement;
    };
    interface HTMLStatusCellElement extends Components.StatusCell, HTMLStencilElement {
    }
    var HTMLStatusCellElement: {
        prototype: HTMLStatusCellElement;
        new (): HTMLStatusCellElement;
    };
    interface HTMLStatusIconElement extends Components.StatusIcon, HTMLStencilElement {
    }
    var HTMLStatusIconElement: {
        prototype: HTMLStatusIconElement;
        new (): HTMLStatusIconElement;
    };
    interface HTMLTableHeaderElementEventMap {
        "sortChange": { column: string; direction: 'asc' | 'desc' };
    }
    interface HTMLTableHeaderElement extends Components.TableHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTableHeaderElementEventMap>(type: K, listener: (this: HTMLTableHeaderElement, ev: TableHeaderCustomEvent<HTMLTableHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTableHeaderElementEventMap>(type: K, listener: (this: HTMLTableHeaderElement, ev: TableHeaderCustomEvent<HTMLTableHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTableHeaderElement: {
        prototype: HTMLTableHeaderElement;
        new (): HTMLTableHeaderElement;
    };
    interface HTMLTableHeaderCellElementEventMap {
        "sortClick": void;
    }
    interface HTMLTableHeaderCellElement extends Components.TableHeaderCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTableHeaderCellElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: TableHeaderCellCustomEvent<HTMLTableHeaderCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTableHeaderCellElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: TableHeaderCellCustomEvent<HTMLTableHeaderCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTableHeaderCellElement: {
        prototype: HTMLTableHeaderCellElement;
        new (): HTMLTableHeaderCellElement;
    };
    interface HTMLTableRowElementEventMap {
        "rowClick": RepairOrderData1;
        "cellClick": { cellType: string; value: any; data: RepairOrderData1 };
        "serviceAdvisorChange": { orderId: string; value: string };
        "technicianChange": { orderId: string; value: string };
    }
    interface HTMLTableRowElement extends Components.TableRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTableRowElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: TableRowCustomEvent<HTMLTableRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTableRowElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: TableRowCustomEvent<HTMLTableRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTableRowElement: {
        prototype: HTMLTableRowElement;
        new (): HTMLTableRowElement;
    };
    interface HTMLUiAvatarElement extends Components.UiAvatar, HTMLStencilElement {
    }
    var HTMLUiAvatarElement: {
        prototype: HTMLUiAvatarElement;
        new (): HTMLUiAvatarElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLElementTagNameMap {
        "contact-cell": HTMLContactCellElement;
        "contact-info-cell": HTMLContactInfoCellElement;
        "dropdown-cell": HTMLDropdownCellElement;
        "my-component": HTMLMyComponentElement;
        "order-id-cell": HTMLOrderIdCellElement;
        "repair-orders-table": HTMLRepairOrdersTableElement;
        "status-badge": HTMLStatusBadgeElement;
        "status-cell": HTMLStatusCellElement;
        "status-icon": HTMLStatusIconElement;
        "table-header": HTMLTableHeaderElement;
        "table-header-cell": HTMLTableHeaderCellElement;
        "table-row": HTMLTableRowElement;
        "ui-avatar": HTMLUiAvatarElement;
        "ui-icon": HTMLUiIconElement;
        "ui-text": HTMLUiTextElement;
    }
}
declare namespace LocalJSX {
    interface ContactCell {
        "avatar"?: string;
        /**
          * @default ''
         */
        "name"?: string;
        "onContactClick"?: (event: ContactCellCustomEvent<string>) => void;
        /**
          * @default true
         */
        "showAvatar"?: boolean;
    }
    interface ContactInfoCell {
        /**
          * @default false
         */
        "clickable"?: boolean;
        "onInfoClick"?: (event: ContactInfoCellCustomEvent<{ type: string; value: string }>) => void;
        /**
          * @default 'text'
         */
        "type"?: ContactInfoCellProps['type'];
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface DropdownCell {
        /**
          * @default false
         */
        "disabled"?: boolean;
        "onDropdownChange"?: (event: DropdownCellCustomEvent<string>) => void;
        /**
          * @default []
         */
        "options"?: DropdownOption[];
        /**
          * @default 'Select...'
         */
        "placeholder"?: string;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface OrderIdCell {
        /**
          * @default ''
         */
        "date"?: string;
        "notificationCount"?: number;
        "onOrderClick"?: (event: OrderIdCellCustomEvent<string>) => void;
        /**
          * @default ''
         */
        "orderId"?: string;
        /**
          * @default 'open'
         */
        "status"?: OrderIdCellProps['status'];
        /**
          * @default ''
         */
        "time"?: string;
    }
    interface RepairOrdersTable {
        /**
          * @default []
         */
        "data"?: RepairOrderData[];
        /**
          * @default false
         */
        "loading"?: boolean;
        "onCellClick"?: (event: RepairOrdersTableCustomEvent<{ cellType: string; value: any; data: RepairOrderData }>) => void;
        "onRowClick"?: (event: RepairOrdersTableCustomEvent<RepairOrderData>) => void;
        "onSortChange"?: (event: RepairOrdersTableCustomEvent<{ column: string; direction: 'asc' | 'desc' }>) => void;
        /**
          * @default ''
         */
        "sortColumn"?: string;
        /**
          * @default null
         */
        "sortDirection"?: 'asc' | 'desc' | null;
    }
    interface StatusBadge {
        /**
          * @default 'md'
         */
        "size"?: StatusBadgeProps['size'];
        /**
          * @default 'none'
         */
        "variant"?: StatusBadgeProps['variant'];
    }
    interface StatusCell {
        /**
          * @default ''
         */
        "status"?: string;
        /**
          * @default 'none'
         */
        "variant"?: StatusCellProps['variant'];
    }
    interface StatusIcon {
        /**
          * @default 'md'
         */
        "size"?: StatusIconProps['size'];
        /**
          * @default 'pending'
         */
        "status"?: StatusIconProps['status'];
    }
    interface TableHeader {
        /**
          * @default []
         */
        "columns"?: TableColumn[];
        "onSortChange"?: (event: TableHeaderCustomEvent<{ column: string; direction: 'asc' | 'desc' }>) => void;
        /**
          * @default ''
         */
        "sortColumn"?: string;
        /**
          * @default null
         */
        "sortDirection"?: 'asc' | 'desc' | null;
    }
    interface TableHeaderCell {
        /**
          * @default 'left'
         */
        "align"?: 'left' | 'center' | 'right';
        "onSortClick"?: (event: TableHeaderCellCustomEvent<void>) => void;
        /**
          * @default null
         */
        "sortDirection"?: 'asc' | 'desc' | null;
        /**
          * @default false
         */
        "sortable"?: boolean;
        "width"?: string | number;
    }
    interface TableRow {
        "data": RepairOrderData1;
        "onCellClick"?: (event: TableRowCustomEvent<{ cellType: string; value: any; data: RepairOrderData1 }>) => void;
        "onRowClick"?: (event: TableRowCustomEvent<RepairOrderData1>) => void;
        "onServiceAdvisorChange"?: (event: TableRowCustomEvent<{ orderId: string; value: string }>) => void;
        "onTechnicianChange"?: (event: TableRowCustomEvent<{ orderId: string; value: string }>) => void;
        /**
          * @default false
         */
        "selectable"?: boolean;
        /**
          * @default false
         */
        "selected"?: boolean;
    }
    interface UiAvatar {
        /**
          * @default ''
         */
        "alt"?: string;
        /**
          * @default 'initials'
         */
        "fallback"?: AvatarProps['fallback'];
        "initials"?: string;
        /**
          * @default 'md'
         */
        "size"?: AvatarProps['size'];
        "src"?: string;
    }
    interface UiIcon {
        "color"?: string;
        /**
          * @default 'user'
         */
        "name"?: IconProps['name'];
        /**
          * @default 'md'
         */
        "size"?: IconProps['size'];
    }
    interface UiText {
        "color"?: TextProps['color'];
        /**
          * @default false
         */
        "truncate"?: boolean;
        /**
          * @default 'body'
         */
        "variant"?: TextProps['variant'];
        "weight"?: TextProps['weight'];
    }
    interface IntrinsicElements {
        "contact-cell": ContactCell;
        "contact-info-cell": ContactInfoCell;
        "dropdown-cell": DropdownCell;
        "my-component": MyComponent;
        "order-id-cell": OrderIdCell;
        "repair-orders-table": RepairOrdersTable;
        "status-badge": StatusBadge;
        "status-cell": StatusCell;
        "status-icon": StatusIcon;
        "table-header": TableHeader;
        "table-header-cell": TableHeaderCell;
        "table-row": TableRow;
        "ui-avatar": UiAvatar;
        "ui-icon": UiIcon;
        "ui-text": UiText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "contact-cell": LocalJSX.ContactCell & JSXBase.HTMLAttributes<HTMLContactCellElement>;
            "contact-info-cell": LocalJSX.ContactInfoCell & JSXBase.HTMLAttributes<HTMLContactInfoCellElement>;
            "dropdown-cell": LocalJSX.DropdownCell & JSXBase.HTMLAttributes<HTMLDropdownCellElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "order-id-cell": LocalJSX.OrderIdCell & JSXBase.HTMLAttributes<HTMLOrderIdCellElement>;
            "repair-orders-table": LocalJSX.RepairOrdersTable & JSXBase.HTMLAttributes<HTMLRepairOrdersTableElement>;
            "status-badge": LocalJSX.StatusBadge & JSXBase.HTMLAttributes<HTMLStatusBadgeElement>;
            "status-cell": LocalJSX.StatusCell & JSXBase.HTMLAttributes<HTMLStatusCellElement>;
            "status-icon": LocalJSX.StatusIcon & JSXBase.HTMLAttributes<HTMLStatusIconElement>;
            "table-header": LocalJSX.TableHeader & JSXBase.HTMLAttributes<HTMLTableHeaderElement>;
            "table-header-cell": LocalJSX.TableHeaderCell & JSXBase.HTMLAttributes<HTMLTableHeaderCellElement>;
            "table-row": LocalJSX.TableRow & JSXBase.HTMLAttributes<HTMLTableRowElement>;
            "ui-avatar": LocalJSX.UiAvatar & JSXBase.HTMLAttributes<HTMLUiAvatarElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
        }
    }
}
