/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonSize, ButtonVariant } from "./components/ui-button/ui-button";
import { InputType } from "./components/ui-input/ui-input";
export { ButtonSize, ButtonVariant } from "./components/ui-button/ui-button";
export { InputType } from "./components/ui-input/ui-input";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface UiButton {
        /**
          * ARIA described by for additional context
         */
        "ariaDescribedby": string;
        /**
          * ARIA label for accessibility
         */
        "ariaLabel": string;
        /**
          * Disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * Loading state
          * @default false
         */
        "loading": boolean;
        /**
          * Button size
          * @default 'md'
         */
        "size": ButtonSize;
        /**
          * Button type
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Button variant style
          * @default 'primary'
         */
        "variant": ButtonVariant;
    }
    interface UiCard {
        /**
          * ARIA label for the card
         */
        "ariaLabel": string;
        /**
          * ARIA labelledby reference
         */
        "ariaLabelledby": string;
    }
    interface UiCardContent {
    }
    interface UiCardHeader {
    }
    interface UiCardTitle {
    }
    interface UiInput {
        /**
          * Disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * Error state
          * @default false
         */
        "error": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorMessage": string;
        /**
          * Input ID
          * @default ''
         */
        "inputId": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * Input name
          * @default ''
         */
        "name": string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder": string;
        /**
          * Required field
          * @default false
         */
        "required": boolean;
        /**
          * Input type
          * @default 'text'
         */
        "type": InputType;
        /**
          * Input value
          * @default ''
         */
        "value": string;
    }
}
export interface UiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiInputElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCardElement extends Components.UiCard, HTMLStencilElement {
    }
    var HTMLUiCardElement: {
        prototype: HTMLUiCardElement;
        new (): HTMLUiCardElement;
    };
    interface HTMLUiCardContentElement extends Components.UiCardContent, HTMLStencilElement {
    }
    var HTMLUiCardContentElement: {
        prototype: HTMLUiCardContentElement;
        new (): HTMLUiCardContentElement;
    };
    interface HTMLUiCardHeaderElement extends Components.UiCardHeader, HTMLStencilElement {
    }
    var HTMLUiCardHeaderElement: {
        prototype: HTMLUiCardHeaderElement;
        new (): HTMLUiCardHeaderElement;
    };
    interface HTMLUiCardTitleElement extends Components.UiCardTitle, HTMLStencilElement {
    }
    var HTMLUiCardTitleElement: {
        prototype: HTMLUiCardTitleElement;
        new (): HTMLUiCardTitleElement;
    };
    interface HTMLUiInputElementEventMap {
        "uiInput": string;
        "uiBlur": void;
        "uiFocus": void;
    }
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiInputElementEventMap>(type: K, listener: (this: HTMLUiInputElement, ev: UiInputCustomEvent<HTMLUiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiInputElementEventMap>(type: K, listener: (this: HTMLUiInputElement, ev: UiInputCustomEvent<HTMLUiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "ui-button": HTMLUiButtonElement;
        "ui-card": HTMLUiCardElement;
        "ui-card-content": HTMLUiCardContentElement;
        "ui-card-header": HTMLUiCardHeaderElement;
        "ui-card-title": HTMLUiCardTitleElement;
        "ui-input": HTMLUiInputElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface UiButton {
        /**
          * ARIA described by for additional context
         */
        "ariaDescribedby"?: string;
        /**
          * ARIA label for accessibility
         */
        "ariaLabel"?: string;
        /**
          * Disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Loading state
          * @default false
         */
        "loading"?: boolean;
        /**
          * Button size
          * @default 'md'
         */
        "size"?: ButtonSize;
        /**
          * Button type
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Button variant style
          * @default 'primary'
         */
        "variant"?: ButtonVariant;
    }
    interface UiCard {
        /**
          * ARIA label for the card
         */
        "ariaLabel"?: string;
        /**
          * ARIA labelledby reference
         */
        "ariaLabelledby"?: string;
    }
    interface UiCardContent {
    }
    interface UiCardHeader {
    }
    interface UiCardTitle {
    }
    interface UiInput {
        /**
          * Disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error state
          * @default false
         */
        "error"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorMessage"?: string;
        /**
          * Input ID
          * @default ''
         */
        "inputId"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * Input name
          * @default ''
         */
        "name"?: string;
        /**
          * Input blur event
         */
        "onUiBlur"?: (event: UiInputCustomEvent<void>) => void;
        /**
          * Input focus event
         */
        "onUiFocus"?: (event: UiInputCustomEvent<void>) => void;
        /**
          * Input change event
         */
        "onUiInput"?: (event: UiInputCustomEvent<string>) => void;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Required field
          * @default false
         */
        "required"?: boolean;
        /**
          * Input type
          * @default 'text'
         */
        "type"?: InputType;
        /**
          * Input value
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "ui-button": UiButton;
        "ui-card": UiCard;
        "ui-card-content": UiCardContent;
        "ui-card-header": UiCardHeader;
        "ui-card-title": UiCardTitle;
        "ui-input": UiInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-card": LocalJSX.UiCard & JSXBase.HTMLAttributes<HTMLUiCardElement>;
            "ui-card-content": LocalJSX.UiCardContent & JSXBase.HTMLAttributes<HTMLUiCardContentElement>;
            "ui-card-header": LocalJSX.UiCardHeader & JSXBase.HTMLAttributes<HTMLUiCardHeaderElement>;
            "ui-card-title": LocalJSX.UiCardTitle & JSXBase.HTMLAttributes<HTMLUiCardTitleElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
        }
    }
}
